	private ArrayList<String> idsFromData(ArrayList<String> data) {
		ArrayList<String> idsFromData = new ArrayList<String>();
		for (String entry : data) {
			String regex = "(\\d+).*";
			Pattern p = Pattern.compile(regex);
			Matcher m = p.matcher(entry);
			if (m.find()) {
				idsFromData.add(m.group(1));
			}
		}
		return idsFromData;
	}



 account for no entries

		if (sortChoice==0){
			// Date - recent first
			Cursor c = SQLHelper.getEntriesDateRecent();
			startManagingCursor(c);
			SimpleCursorAdapter entries = new SimpleCursorAdapter(this,
					R.layout.archive_items, c,  columns, listItemTextViews);
			lvContent.setAdapter(entries);
			
		} else if (sortChoice==1){
			// Date - oldest first
			Cursor c = SQLHelper.getEntriesDateOldest();
			startManagingCursor(c);
			SimpleCursorAdapter entries = new SimpleCursorAdapter(this,
					R.layout.archive_items, c,  columns, listItemTextViews);
			lvContent.setAdapter(entries);
			
		} else if (sortChoice==2){
			// Miles descending
			Cursor c = SQLHelper.getEntriesMilesDescending();
			startManagingCursor(c);
			SimpleCursorAdapter entries = new SimpleCursorAdapter(this,
					R.layout.archive_items, c,  columns, listItemTextViews);
			lvContent.setAdapter(entries);
			
		} else if (sortChoice==3){
			// Miles ascending
			Cursor c = SQLHelper.getEntriesMilesAscending();
			startManagingCursor(c);
			SimpleCursorAdapter entries = new SimpleCursorAdapter(this,
					R.layout.archive_items, c, columns, listItemTextViews);
			lvContent.setAdapter(entries);
			
		} else if (sortChoice==4){
			// Activity type
			Cursor c = SQLHelper.getEntriesByActivity();
			startManagingCursor(c);
			SimpleCursorAdapter entries = new SimpleCursorAdapter(this,
					R.layout.archive_items, c, columns, listItemTextViews);
			lvContent.setAdapter(entries);
			//entries.notifyDataSetChanged();
		}




BUGGY IMPLEMENTATION OF DIFFERNET MONTHS ON LOG SCREEN

	public Cursor fetchEntriesDifferentMonth(int monthDifference) {
		String monthDiff = String.valueOf(monthDifference);
		if (monthDifference == 0) {
			// current month
			return ourDatabase
					.rawQuery(
							"SELECT * FROM trainingTable WHERE date BETWEEN date('now', 'start of month') AND date('now', 'localtime') ORDER BY date DESC",
							null);
		} else if (monthDifference == -1) {
			// no minus sign needed before monthDiff variables because it is
			// automatically displayed for negative numbers
			// change to previous month
			return ourDatabase
					.rawQuery(
							"SELECT * FROM trainingTable WHERE date BETWEEN date('now', 'start of month', '"
									+ monthDiff
									+ " month') AND date('now', 'start of month', '-1 day', 'localtime') ORDER BY date DESC",
							null);
		} else if (monthDifference < -1) {

			// partially working - bugged with entries at the beginning and end
			// of
			// month due to SQLite implementation of minus/plus months
			// 'normalising'

			// comparison month needed to get records between monthdiff and the
			// month after (entries in past)
			String monthDiffPlusOne = String.valueOf(monthDifference + 1);
			return ourDatabase
					.rawQuery(
							"SELECT * FROM trainingTable WHERE date BETWEEN date('now', 'start of month', '"
									+ monthDiff
									+ " months') AND date('now', 'start of month', '"
									+ monthDiffPlusOne
									+ " month', 'localtime')", null);
		} else if (monthDifference >= 1) {

			// Plus sign needed before monthDiff variables here because it is
			// not automatically displayed
			// change to + month based on monthDifference
			// select results from entries within start of next month and end of
			// next month
			
			String monthDiffPlusOne = String.valueOf(monthDifference + 1);
			return ourDatabase
					.rawQuery(
							"SELECT * FROM trainingTable WHERE date BETWEEN date('now', 'start of month', '+"
									+ monthDiff
									+ " month') AND date('now', 'start of month', '+"
									+ monthDiffPlusOne + " months', '-1 day') ORDER BY date DESC",
							null);
		}
		return null;
	}


	public SimpleCursorAdapter changeMonth(int monthDifference){
		//database call with month int
		// month + or - one
		databaseHelper.open();
		Cursor tempCursor = databaseHelper.fetchEntriesDifferentMonth(monthDifference);
		startManagingCursor(tempCursor);
		SimpleCursorAdapter entriesAdapter = new SimpleCursorAdapter(this,
				R.layout.archive_items, tempCursor, columns, listItemTextViews);
		stopManagingCursor(tempCursor);
		//databaseHelper.close();
		return formatAdapter(entriesAdapter);
		//attach cursor to listview adapter and notfiydataset changed
		//refresh view without restarting activity
	}